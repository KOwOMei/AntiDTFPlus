import asyncio
import json
import os
import httpx
import logging
from typing import Literal

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('app.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(log_formatter)
logging.getLogger().addHandler(file_handler)

TOKEN_CACHE_FILE = "token_cache.json"

class TokenManager:
    def __init__(self, email: str | None = None, password: str | None = None):
        self.email = email
        self.password = password
        self.access_token = None
        self.refresh_token = None
        self._load_tokens_from_cache()

    def _load_tokens_from_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫—ç—à–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        try:
            if os.path.exists(TOKEN_CACHE_FILE):
                with open(TOKEN_CACHE_FILE, 'r') as f:
                    tokens = json.load(f)
                    self.access_token = tokens.get("accessToken")
                    self.refresh_token = tokens.get("refreshToken")
                    if self.access_token and self.refresh_token:
                        logger.info("‚úÖ TokenManager: –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞.")
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.warning("‚ö†Ô∏è TokenManager: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏–∑ –∫—ç—à–∞: %s", e)

    def _save_tokens_to_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª –∫—ç—à–∞."""
        tokens = {
            "accessToken": self.access_token,
            "refreshToken": self.refresh_token
        }
        with open(TOKEN_CACHE_FILE, 'w') as f:
            json.dump(tokens, f)
        logger.info("üíæ TokenManager: –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à.")

    async def login(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã."""
        if self.access_token and self.refresh_token:
            logger.info("‚úÖ TokenManager: –¢–æ–∫–µ–Ω—ã —É–∂–µ –µ—Å—Ç—å, –≤—Ö–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return True

        url = "https://api.dtf.ru/v3.4/auth/email/login"
        payload = {"email": self.email, "password": self.password}
        headers = {"User-Agent": "Mozilla/5.0 (Android 14; Mobile; rv:137.0) Gecko/137.0 Firefox/137.0"}
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, data=payload, headers=headers)
            if response.status_code == 200:
                data = response.json().get("data", {})
                self.access_token = data.get("accessToken")
                self.refresh_token = data.get("refreshToken")
                if self.access_token and self.refresh_token:
                    logger.info("‚úÖ TokenManager: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã.")
                    self._save_tokens_to_cache()
                    return True
        logger.error("‚ùå TokenManager: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞.")
        return False

    async def refresh(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è refresh_token."""
        if not self.refresh_token:
            logger.warning("‚ö†Ô∏è TokenManager: –ù–µ—Ç refresh_token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.")
            await self.login()
            return

        url = "https://api.dtf.ru/v3.4/auth/refresh"
        payload = {"token": self.refresh_token}
        headers = {"User-Agent": "Mozilla/5.0 (Android 14; Mobile; rv:137.0) Gecko/137.0 Firefox/137.0"}

        async with httpx.AsyncClient() as client:
            response = await client.post(url, data=payload, headers=headers)
            if response.status_code == 200:
                data = response.json().get("data", {})
                self.access_token = data.get("accessToken")
                self.refresh_token = data.get("refreshToken")
                self._save_tokens_to_cache()
                logger.info("‚úÖ TokenManager: –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            else:
                logger.error("‚ùå TokenManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.")
                await self.login()

async def get_user_info(token_manager: TokenManager) -> dict:
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è userHash –∏ mHash."""
    await token_manager.refresh()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã
    access_token = token_manager.access_token
    if not access_token:
        logger.error("‚ùå get_user_info: –ù–µ—Ç access_token.")
        return None
    
    url = "https://api.dtf.ru/v2.31/subsite/me"
    headers = {
        "jwtauthorization": f"Bearer {access_token}",
        "User-Agent": "Mozilla/5.0 (Android 14; Mobile; rv:137.0) Gecko/137.0 Firefox/137.0"
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ JSON
            result_data = response.json().get("result", {})
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
            return result_data
        
        except Exception as e:
            logger.error("‚ùå get_user_info: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: %s", e, exc_info=True)
    
    logger.error("‚ùå get_user_info: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
    return None

async def send_comment(post_id: int, reply_to_id: int, text: str, token_manager: TokenManager) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É.
    :param post_id: ID –ø–æ—Å—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    :param text: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
    :param token_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä TokenManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏.
    """
    url = f"https://api.dtf.ru/v2.4/comment/add"
    headers = {
        "jwtauthorization": f"Bearer {token_manager.access_token}",
        "User-Agent": "Mozilla/5.0 (Android 14; Mobile; rv:137.0) Gecko/137.0 Firefox/137.0"
    }
    payload = {
        "id": post_id,
        "text": text,
        "reply_to": reply_to_id
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload, headers=headers)
        if response.status_code == 200:
            comment_id = response.json().get("result", {}).get("id")
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å ID {comment_id}.")
            return comment_id
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {response.text}")
            return -1

async def delete_comment(comment_id: int, withThread: bool, token_manager: TokenManager) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –µ–≥–æ ID.
    :param comment_id: ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    :param withThread: –£–¥–∞–ª—è—Ç—å –ª–∏ –≤–µ—Ç–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    :param token_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä TokenManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏.
    """
    url = f"https://api.dtf.ru/v3.0/comments/{comment_id}"
    headers = {
        "jwtauthorization": f"Bearer {token_manager.access_token}",
        "User-Agent": "Mozilla/5.0 (Android 14; Mobile; rv:137.0) Gecko/137.0 Firefox/137.0"
    }
    params = {
        "withThread": withThread
    }

    async with httpx.AsyncClient() as client:
        response = await client.delete(url, headers=headers, params=params)
        if response.status_code == 200:
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment_id}: {response.text}")
            return False

async def get_subsite_posts(subsite_id: int, token_manager: TokenManager) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ —É –ø–æ–¥—Å–∞–π—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É.
    :param subsite_id: ID –ø–æ–¥—Å–∞–π—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param token_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä TokenManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏.
    """
    await token_manager.refresh()
    
    all_posts = []
    lastId = 0
    lastSortingValue = 0
    
    url = f"https://api.dtf.ru/v2.8/timeline"
    headers = {
        "jwtauthorization": f"Bearer {token_manager.access_token}",
        "User-Agent": "Mozilla/5.0 (Android 14; Mobile; rv:137.0) Gecko/137.0 Firefox/137.0"
    }

    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {subsite_id}...")
    async with httpx.AsyncClient() as client:
        while True:
            params = {
                "subsitesIds": subsite_id,
                "sorting": "new",
                "markdown": "false",
                "lastId": lastId,
                "lastSortingValue": lastSortingValue,
            }
            try:
                response = await client.get(url, headers=headers, params=params)
                response.raise_for_status()
                
                result = response.json().get("result", {})
                posts = result.get("items", [])
                
                if not posts:
                    logger.info("–ë–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞—é –∑–∞–≥—Ä—É–∑–∫—É.")
                    break
                
                all_posts.extend(posts)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_posts)} –ø–æ—Å—Ç–æ–≤...")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                lastId = result.get("lastId")
                lastSortingValue = result.get("lastSortingValue")

            except httpx.HTTPStatusError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e.response.status_code} - {e.response.text}")
                break
            except Exception as e:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤: {e}", exc_info=True)
                break
                
    return all_posts

async def get_post_comments(post_id: int, token_manager: TokenManager) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É.
    :param post_id: ID –ø–æ—Å—Ç–∞.
    :param token_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä TokenManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏.
    """
    await token_manager.refresh()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã
    url = f"https://api.dtf.ru/v2.9/comments"
    headers = {
        "jwtauthorization": f"Bearer {token_manager.access_token}",
        "User-Agent": "Mozilla/5.0 (Android 14; Mobile; rv:137.0) Gecko/137.0 Firefox/137.0"
    }
    params = {
        "contentId": post_id,
        "sorting": "date",
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json().get("result", []).get("items", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É {post_id}.")
            return data
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É {post_id}: {response.text}")
            return []

async def find_and_delete_plus_users_comments(type: Literal['all_posts', 'one_post'], post_id: int | None, subsite_id: int | None, token_manager: TokenManager) -> int:
    """
    –ò—â–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Plus, –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ–º –∏—Ö.
    :param type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ('all_posts' –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ 'one_post' –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞).
    :param post_id: ID –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ type='one_post'.
    :param subsite_id: ID –ø–æ–¥—Å–∞–π—Ç–∞, –µ—Å–ª–∏ type='all_posts'.
    :param token_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä TokenManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏.
    """
    if (type == 'all_posts' and subsite_id is None) or (type == 'one_post' and post_id is None):
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.")
        return
    
    plus_comment_deleted_count = 0

    match type:
        case 'all_posts':
            logger.info("üîç –ü–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç Plus-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞—Ö...")
            posts = await get_subsite_posts(subsite_id, token_manager=token_manager)
            for post in posts:
                post_id = post.get("id")
                plus_comment_deleted_count += await delete_all_comments_from_post(post_id,token_manager)
            return plus_comment_deleted_count

        case 'one_post':
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç Plus-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ—Å—Ç–µ {post_id}...")
            return await delete_all_comments_from_post(post_id,token_manager)

        case _:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'all_posts' –∏–ª–∏ 'one_post'.")
            return -1

async def delete_all_comments_from_post(post_id: int, token_manager: TokenManager) -> int:
    comment_deleted_count = 0
    comments = await get_post_comments(post_id, token_manager)
    for comment in comments:
        user_plus_status = comment.get("author", {}).get("isPlus")
        username = comment.get("author", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        if user_plus_status:
            await send_comment(post_id, comment.get("id"), f"{username}, –∑–¥–µ—Å—å –±–æ–≥–∞—Ç–µ—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Plus –Ω–µ —Ä–∞–¥—ã! –û—Ç–º–µ–Ω–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É - —Ç–æ–≥–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º. \n AntiDTFPlus - '–°–µ–π—á–∞—Å –∑–∞–ø—Ä–µ—â—É –ª—é–¥—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Plus –ø–∏—Å–∞—Ç—å –ø–æ–¥ –º–æ–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏, —Ç–∞–∫ –ö–æ–º–∏—Ç–µ—Ç —Å—Ä–∞–∑—É –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–µ—Ä–Ω–µ—Ç...'", token_manager)
            await delete_comment(comment.get("id"), withThread=False, token_manager=token_manager)
            comment_deleted_count += 1
    return comment_deleted_count